// Generated by CoffeeScript 1.7.1

/*
 * Read Linux mouse(s) in node.js
 * Author: Marc Loehe (marcloehe@gmail.com)
 * Rewriten in CoffeeScript by Florian Greiner (florian.greiner.pro@gmail.com)
 *
 * Adapted from Tim Caswell's nice solution to read a linux joystick
 * http://nodebits.org/linux-joystick
 * https://github.com/nodebits/linux-joystick
 */
var EventEmitter, MouseReader, down, fs, parse,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

EventEmitter = require('events').EventEmitter;

down = 0;

parse = function(buffer) {
  var event;
  event = {
    leftBtn: (buffer[0] & 1) > 0,
    rightBtn: (buffer[0] & 2) > 0,
    middleBtn: (buffer[0] & 4) > 0,
    xSign: (buffer[0] & 16) > 0,
    ySign: (buffer[0] & 32) > 0,
    xOverflow: (buffer[0] & 64) > 0,
    yOverflow: (buffer[0] & 128) > 0,
    xDelta: buffer.readInt8(1),
    yDelta: buffer.readInt8(2)
  };
  if ((event.leftBtn || event.rightBtn || event.middleBtn) && !down) {
    event.type = 'buttonDown';
    if (event.leftBtn) {
      event.button = 1;
    }
    if (event.rightBtn) {
      event.button = 3;
    }
    if (event.middleBtn) {
      event.button = 2;
    }
    down = event.button;
  } else if (!event.leftBtn && !event.rightBtn && !event.middleBtn && down) {
    event.type = 'buttonUp';
    event.button = down;
    down = 0;
  } else {
    event.type = 'moved';
  }
  return event;
};

MouseReader = (function(_super) {
  __extends(MouseReader, _super);

  function MouseReader(mouseid) {
    this.Wrap('OnOpen');
    this.Wrap('OnRead');
    this.dev = typeof mouseid === 'number' ? 'mouse' + mouseid : 'mice';
    this.buf = new Buffer(3);
    fs.open('/dev/input/' + this.dev, 'r', this.OnOpen);
  }

  MouseReader.prototype.Wrap = function(name) {
    var fn;
    fn = this[name];
    return this[name] = (function(_this) {
      return function(err) {
        if (err != null) {
          return _this.emit('error', err);
        }
        return fn.apply(_this, Array.prototype.slice.call(arguments, 1));
      };
    })(this);
  };

  MouseReader.prototype.OnOpen = function(fd) {
    this.fd = fd;
    return this.StartRead();
  };

  MouseReader.prototype.StartRead = function() {
    return fs.read(this.fd, this.buf, 0, 3, null, this.OnRead);
  };

  MouseReader.prototype.OnRead = function(bytesRead) {
    var event;
    event = parse(this.buf);
    event.dev = this.dev;
    this.emit(event.type, event);
    if (this.fd) {
      return this.StartRead();
    }
  };

  MouseReader.prototype.Close = function(callback) {
    fs.close(this.fd, function() {
      return console.log(this);
    });
    return this.fd = void 0;
  };

  return MouseReader;

})(EventEmitter);

module.exports = MouseReader;
