// Generated by CoffeeScript 1.7.1
var ButtonPress, EventEmitter, Log, PointerMotion, X, x11,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

x11 = require('x11');

EventEmitter = require('events').EventEmitter;

Log = require('./Log');

PointerMotion = x11.eventMask.PointerMotion;

ButtonPress = x11.eventMask.ButtonPress;

X = (function(_super) {
  __extends(X, _super);

  function X(done) {
    this.grabed = false;
    x11.createClient((function(_this) {
      return function(err, display) {
        if (err != null) {
          return Log.Error(err);
        }
        _this.display = display;
        _this.X = _this.display.client;
        _this.root = _this.display.screen[0].root;
        return done();
      };
    })(this));
  }

  X.prototype.StartPointerQuery = function() {
    return this.pointerTimer = setInterval((function(_this) {
      return function() {
        return _this.X.QueryPointer(_this.root, function(err, fields) {
          return _this.emit('mousePos', {
            x: fields.rootX,
            y: fields.rootY
          });
        });
      };
    })(this), 50);
  };

  X.prototype.StopPointerQuery = function() {
    return clearInterval(this.pointerTimer);
  };

  X.prototype.CreateCaptureWindow = function(screenSize) {
    var gc;
    this.captureWid = this.X.AllocID();
    this.X.CreateWindow(this.captureWid, this.root, this.display.screen[0].pixel_width - 1, this.display.screen[0].pixel_height - 1, screenSize.width, screenSize.height, 0, 0, 1, 0, {
      eventMask: PointerMotion | ButtonPress
    });
    this.X.MapWindow(this.captureWid);
    gc = this.X.AllocID();
    this.X.CreateGC(gc, this.captureWid);
    this.X.on('event', (function(_this) {
      return function(ev) {
        if (ev.name === 'MotionNotify' && ev.wid === _this.captureWid) {
          console.log('Client mouse !', ev);
          return _this.emit('mousePos', {
            x: ev.x,
            y: ev.y
          });
        }
      };
    })(this));
    return this.X.on('error', function(e) {
      return Log.error(e);
    });
  };

  X.prototype.DestroyCaptureWindow = function() {};

  X.prototype.MovePointer = function(pos) {
    var target;
    target = this.root;
    if (this.grabed) {
      target = this.captureWid;
    }
    return this.X.WarpPointer(null, target, 0, 0, 0, pos.x, pos.y);
  };

  X.prototype.Grab = function() {
    this.X.GrabPointer(this.captureWid, false, {
      eventMask: PointerMotion | ButtonPress
    }, void 0, void 0, this.captureWid, function(err, data) {
      return console.log('Grab', err, data);
    });
    return this.grabed = true;
  };

  X.prototype.Ungrab = function() {
    this.X.UngrabPointer();
    return this.grabed = false;
  };

  return X;

})(EventEmitter);

module.exports = X;
