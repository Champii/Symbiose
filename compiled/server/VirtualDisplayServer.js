// Generated by CoffeeScript 1.7.1
var DistantScreenServer, LocalScreenServer, Log, VirtualDisplay, VirtualDisplayServer, Window, X, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

X = require('../common/X');

Log = require('../common/Log');

Window = require('../common/Window');

VirtualDisplay = require('../common/VirtualDisplay');

LocalScreenServer = require('./LocalScreenServer');

DistantScreenServer = require('./DistantScreenServer');

VirtualDisplayServer = (function(_super) {
  __extends(VirtualDisplayServer, _super);

  function VirtualDisplayServer() {
    var center;
    VirtualDisplayServer.__super__.constructor.call(this);
    this.switched = false;
    this.mainScreen = new LocalScreenServer;
    this.screenPlacement['Top'].expectedClient = 'client1';
    this.captureWin = 0;
    center = {
      x: this.mainScreen.size.width / 2,
      y: this.mainScreen.size.height / 2
    };
    this.mouse.on('moved', (function(_this) {
      return function() {
        var pos;
        if (_this.switched && _this.mouse.pos.x !== center.x && _this.mouse.pos.y !== center.y) {
          pos = {
            x: _this.mouse.pos.x - center.x,
            y: _this.mouse.pos.y - center.y
          };
          _this.switched.MovePointerRelative(pos);
          return _this.mouse.MovePointer(center);
        }
      };
    })(this));
    this.mouse.on('buttonDown', (function(_this) {
      return function(k) {
        if (_this.switched) {
          return _this.switched.socket.emit('buttonDown', k);
        }
      };
    })(this));
    this.mouse.on('buttonUp', (function(_this) {
      return function(k) {
        if (_this.switched) {
          return _this.switched.socket.emit('buttonUp', k);
        }
      };
    })(this));
    this.keyboard.on('keyDown', (function(_this) {
      return function(k) {
        if (_this.switched) {
          return _this.switched.socket.emit('keyDown', k);
        }
      };
    })(this));
    this.keyboard.on('keyUp', (function(_this) {
      return function(k) {
        if (_this.switched) {
          return _this.switched.socket.emit('keyUp', k);
        }
      };
    })(this));
    X.on('event', (function(_this) {
      return function(ev) {
        var k, v, _ref;
        if (ev.name === 'ConfigureNotify') {
          if (_this.captureWin && ev.wid === _this.captureWin) {
            return;
          }
          if (_this.mainScreen.HasWindow(ev)) {
            return;
          }
          _ref = _this.screenPlacement;
          for (k in _ref) {
            v = _ref[k];
            if ((v.client != null) && v.client.HasWindow(ev)) {
              return;
            }
          }
          return _this.mainScreen.NewWindow(ev);
        }
      };
    })(this));
  }

  VirtualDisplayServer.prototype.EnableSwitch = function(placement) {
    return this.mainScreen.on('switch' + placement, (function(_this) {
      return function(obj) {
        if ((obj.wid != null) && _this.mainScreen.HasWindow(obj)) {
          obj.Move({
            x: 100,
            y: 100
          });
          _this.SwitchWindowTo(obj, _this.screenPlacement[placement].client);
        }
        return _this._Switch(placement);
      };
    })(this));
  };

  VirtualDisplayServer.prototype._AfterSwitchPos = function(placement, mouse) {
    var pos;
    pos = {
      x: this.screenPlacement[placement].afterSwitchPos.x,
      y: this.screenPlacement[placement].afterSwitchPos.y
    };
    if (pos.x === 'mouse') {
      pos.x = mouse.pos.x;
    }
    if (pos.y === 'mouse') {
      pos.y = mouse.pos.y;
    }
    if (pos.x === 'clientMax') {
      pos.x = this.screenPlacement[placement].client.size.width - 2;
    }
    if (pos.y === 'clientMax') {
      pos.y = this.screenPlacement[placement].client.size.height - 2;
    }
    if (pos.x === 'clientMin') {
      pos.x = 2;
    }
    if (pos.y === 'clientMin') {
      pos.y = 2;
    }
    return pos;
  };

  VirtualDisplayServer.prototype._SwitchPointers = function(switched, placement) {
    var pos;
    if (placement) {
      pos = this._AfterSwitchPos(placement, this.mouse);
      this.screenPlacement[placement].client.MovePointer(pos);
      return this.mouse.MovePointer({
        x: this.mainScreen.size.width / 2,
        y: this.mainScreen.size.height / 2
      });
    } else {
      pos = this._AfterSwitchPos(this.screenPlacement[switched.placement].reverse, switched);
      return _.defer((function(_this) {
        return function() {
          return _this.mouse.MovePointer(pos);
        };
      })(this));
    }
  };

  VirtualDisplayServer.prototype._Switch = function(placement) {
    var switchedSave;
    switchedSave = this.switched;
    if (this.switched && (placement != null)) {
      return;
    }
    if (this.switched || (placement == null)) {
      this.switched = false;
    } else {
      this.switched = this.screenPlacement[placement].client;
    }
    this._SwitchPointers(switchedSave, placement);
    if (this.switched) {
      return this.captureWin = X.CreateCaptureWindow();
    } else {
      X.DestroyCaptureWindow();
      return this.captureWin = 0;
    }
  };

  VirtualDisplayServer.prototype.SwitchWindowTo = function(win, screen) {
    var pos;
    pos = this._AfterSwitchPos(screen.placement, {
      pos: {
        x: win.x,
        y: win.y
      }
    });
    pos = {
      x: 100,
      y: 100
    };
    screen.socket.emit('newWindow', _(win.Serialize()).extend(pos));
    this.mainScreen.DelWindow(win);
    return screen.AddWindow(win);
  };

  VirtualDisplayServer.prototype.AddScreen = function(socket) {
    socket.once('screenInfos', (function(_this) {
      return function(infos) {
        var k, v, _ref;
        _ref = _this.screenPlacement;
        for (k in _ref) {
          v = _ref[k];
          if (v.expectedClient === infos.name) {
            infos.placement = k;
            infos.placementReverse = _this.screenPlacement[k].reverse;
            _this.screenPlacement[k].client = new DistantScreenServer(infos, socket);
            _this.screenPlacement[k].client.on('switch', function() {
              return _this._Switch();
            });
            _this.screenPlacement[k].client.socket.on('windowReturn', function(win) {
              win = _this.screenPlacement[k].client.DelWindow(win);
              return _this.mainScreen.AddWindow(win);
            });
            _this.EnableSwitch(k);
            Log.Log('New screen added: ', infos);
            return;
          }
        }
      };
    })(this));
    return socket.emit('askScreenInfos');
  };

  return VirtualDisplayServer;

})(VirtualDisplay);

module.exports = VirtualDisplayServer;
