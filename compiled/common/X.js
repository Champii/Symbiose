// Generated by CoffeeScript 1.7.1
var Button1Motion, ButtonMotion, ButtonPress, ButtonRelease, EventEmitter, Exposure, Log, PointerMotion, StructureNotify, SubstructureNotify, X, x11,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

x11 = require('x11');

EventEmitter = require('events').EventEmitter;

Log = require('./Log');

Exposure = x11.eventMask.Exposure;

PointerMotion = x11.eventMask.PointerMotion;

ButtonMotion = x11.eventMask.ButtonMotion;

Button1Motion = x11.eventMask.Button1Motion;

ButtonPress = x11.eventMask.ButtonPress;

ButtonRelease = x11.eventMask.ButtonRelease;

StructureNotify = x11.eventMask.StructureNotify;

SubstructureNotify = x11.eventMask.SubstructureNotify;

X = (function(_super) {
  __extends(X, _super);

  function X() {
    this.grabed = false;
    this.windowId = 0;
    this.windows = [];
    this.defaultEventMask = Exposure | PointerMotion | StructureNotify | SubstructureNotify;
  }

  X.prototype.Init = function(done) {
    return x11.createClient((function(_this) {
      return function(err, display) {
        if (err != null) {
          return Log.Error(err);
        }
        _this.display = display;
        _this.X = _this.display.client;
        _this.screen = _this.display.screen[0];
        _this.root = _this.screen.root;
        _this.InitEventTree(_this.root);
        _this.X.on('event', function(ev) {
          if (ev.wid != null) {
            _this.emit('event', ev);
          }
          if (ev.name === 'CreateNotify') {
            return _this.InitEventTree(ev.parent);
          }
        });
        _this.X.on('error', function(e) {
          return Log.Error(e);
        });
        return done();
      };
    })(this));
  };

  X.prototype.InitEventTree = function(root) {
    return this.X.QueryTree(root, (function(_this) {
      return function(err, tree) {
        if (err != null) {
          return Log.Error(err);
        }
        return tree.children.forEach(function(wid) {
          _this.X.ChangeWindowAttributes(wid, {
            eventMask: _this.defaultEventMask
          });
          return _this.InitEventTree(wid);
        });
      };
    })(this));
  };

  X.prototype.CreateBlankCursor = function() {
    var color, cursorSourceId, gc;
    if (this.cursorId == null) {
      cursorSourceId = this.X.AllocID();
      this.X.CreatePixmap(cursorSourceId, this.captureWid, 1, 1, 1);
      gc = this.X.AllocID();
      this.X.CreateGC(gc, cursorSourceId);
      this.X.PutImage(1, cursorSourceId, gc, 1, 1, 0, 0, 0, 1, 0);
      color = {
        R: 0,
        G: 0,
        B: 0
      };
      this.cursorId = this.X.AllocID();
      this.X.CreateCursor(this.cursorId, cursorSourceId, 0, color, color, 0, 0);
    }
    return this.cursorId;
  };

  X.prototype.CreateCaptureWindow = function() {
    this.captureWid = this.X.AllocID();
    this.X.CreateWindow(this.captureWid, this.root, 0, 0, this.display.screen[0].pixel_width, this.display.screen[0].pixel_height, 0, 0, 2, 0, {
      eventMask: PointerMotion | ButtonPress | ButtonRelease
    });
    this.X.ChangeWindowAttributes(this.captureWid, {
      cursor: this.CreateBlankCursor()
    });
    this.X.MapWindow(this.captureWid);
    return this.captureWid;
  };

  X.prototype.DestroyCaptureWindow = function() {
    this.X.DestroyWindow(this.captureWid);
    return this.captureWid = null;
  };

  X.prototype.MovePointer = function(pos) {
    var target;
    target = this.root;
    return this.X.WarpPointer(0, target, 0, 0, 0, 0, pos.x, pos.y);
  };

  X.prototype.Grab = function() {
    this.X.GrabPointer(this.captureWid, false, {
      eventMask: PointerMotion | ButtonPress
    }, void 0, void 0, this.captureWid, function(err, data) {
      return console.log('Grab', err, data);
    });
    return this.grabed = true;
  };

  X.prototype.Ungrab = function() {
    this.X.UngrabPointer();
    return this.grabed = false;
  };

  X.prototype.GetWindowImage = function(win, done) {
    return this.X.GetImage(2, win.wid, 0, 0, win.width, win.height, 0xffffffff, done);
  };

  X.prototype.SendNewWindow = function(ev) {
    var timer, winId;
    this.emit('switchOutput');
    console.log("SendNewWindow");
    winId = this.windowId++;
    if (!winId) {
      this.X.ChangeWindowAttributes(ev.wid, {
        backingStore: 2
      });
      timer = setInterval((function(_this) {
        return function() {
          return _this.X.GetImage(2, ev.wid, 0, 0, ev.width, ev.height, 0xffffffff, function(err, res) {
            if (err != null) {
              return Log.Error(err);
            }
            console.log('GetImage', res);
            return _this.emit('window', {
              id: winId,
              width: ev.width,
              height: ev.height,
              image: res
            });
          });
        };
      })(this), 2000);
      return this.windows[winId] = {
        timer: timer
      };
    }
  };

  X.prototype.CreateWindow = function(win) {
    var gc, wid;
    wid = this.X.AllocID();
    this.X.CreateWindow(wid, this.root, win.x, win.y, win.width, win.height, win.borderWidth, win.depth, win.type, win.visuals, win.attributes, function(err) {
      return Log.Error('CreateWindow', err);
    });
    gc = this.X.AllocID();
    this.X.CreateGC(wid, gc);
    return [wid, gc];
  };

  X.prototype.MapWindow = function(wid) {
    return this.X.MapWindow(wid);
  };

  X.prototype.UnmapWindow = function(wid) {
    return this.X.UnmapWindow(wid);
  };

  X.prototype.FillWindow = function(data) {
    var win;
    console.log('FillWindow');
    if (this.windows[data.id] == null) {
      this.CreateWindow(data);
    }
    win = this.windows[data.id];
    console.log(this.windows);
    return this.X.PutImage(2, win.wid, win.gc, win.width, win.height, 0, 0, 0, 24, data.image.data, function(err, lol) {
      return console.log('PutImage', err);
    });
  };

  return X;

})(EventEmitter);

module.exports = new X;
