// Generated by CoffeeScript 1.7.1
var EventEmitter, Log, Window, X, nextId, validAttrs, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

EventEmitter = require('events').EventEmitter;

X = require('./X');

Log = require('./Log');

validAttrs = {
  wid: 0,
  x: 0,
  y: 0,
  width: 100,
  height: 100,
  borderWidth: 1,
  depth: 0,
  type: 1,
  visuals: 0,
  attributes: {
    eventMask: X.defaultEventMask
  },
  visible: false,
  distant: false,
  hostId: 0
};

nextId = 0;

Window = (function(_super) {
  __extends(Window, _super);

  function Window(attrs) {
    var res;
    this.id = nextId++;
    this.Deserialize(attrs);
    if (!this.wid) {
      res = X.CreateWindow(this);
      this.wid = res[0];
      this._cgid = res[1];
    }
    if (this.visible) {
      this.Show();
    }
    if (this.distant && attrs.image) {
      this.FillWindow(attrs.image);
      this.Show();
    }
    this.Init();
  }

  Window.prototype.Init = function() {
    var eventsHandlers;
    eventsHandlers = {
      ConfigureNotify: (function(_this) {
        return function(ev) {
          return _this.HandleConfigure(ev);
        };
      })(this),
      Expose: (function(_this) {
        return function(ev) {
          return _this.HandleExpose(ev);
        };
      })(this),
      MapNotify: (function(_this) {
        return function(ev) {
          return _this.HandleMap(ev);
        };
      })(this),
      DamageNotify: (function(_this) {
        return function(ev) {
          return _this.HandleDamage(ev);
        };
      })(this)
    };
    return X.on('event', (function(_this) {
      return function(ev) {
        if ((ev.wid === _this.wid && !_this.distant) || (ev.wid == null)) {
          if (eventsHandlers[ev.name] != null) {
            return eventsHandlers[ev.name](ev);
          }
        }
      };
    })(this));
  };

  Window.prototype.Deserialize = function(attrs) {
    var k, v, _results;
    for (k in attrs) {
      v = attrs[k];
      if (validAttrs[k] != null) {
        this[k] = v;
      }
    }
    _results = [];
    for (k in validAttrs) {
      v = validAttrs[k];
      if (this[k] == null) {
        _results.push(this[k] = v);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Window.prototype.Serialize = function() {
    return {
      hostId: this.hostId ? this.hostId : this.id,
      width: this.width,
      height: this.height,
      distant: true,
      visible: true
    };
  };

  Window.prototype.Show = function() {
    this.visible = true;
    return X.MapWindow(this.wid);
  };

  Window.prototype.Hide = function() {
    this.visible = false;
    return X.UnmapWindow(this.wid);
  };

  Window.prototype.Move = function(pos) {
    return X.X.ConfigureWindow(this.wid, pos);
  };

  Window.prototype.Resize = function(size) {
    return X.X.ConfigureWindow(this.wid, size);
  };

  Window.prototype.HandleConfigure = function(ev) {
    if (ev.x !== this.x || ev.y !== this.y) {
      this.x = ev.x;
      this.y = ev.y;
      this.emit('moved');
    }
    if (ev.width !== this.width || ev.height !== this.height) {
      this.width = ev.width;
      this.height = ev.height;
      return this.emit('resized');
    }
  };

  Window.prototype.HandleExpose = function(ev) {};

  Window.prototype.HandleMap = function(ev) {
    X.X.FreePixmap(this.offPixmap);
    return this.GetOffPixmap();
  };

  Window.prototype.HandleDamage = function(ev) {
    if (this.socket != null) {
      return this.SendTo(ev.area, this.socket);
    }
  };

  Window.prototype.FillWindow = function(image) {
    return X.FillWindow(this, image);
  };

  Window.prototype.SendTo = function(region, socket) {
    var pixmap, thus;
    if (socket == null) {
      socket = region;
      region = {
        x: 0,
        y: 0,
        w: this.width,
        h: this.height
      };
    }
    thus = this;
    pixmap = _(thus).extend({
      wid: this.offPixmap
    });
    return X.GetWindowImage(pixmap, region, (function(_this) {
      return function(err, image) {
        if (err != null) {
          return Log.Error('GetWindowImage', err);
        }
        return socket.emit('windowContent', _(_this.Serialize()).extend({
          image: image,
          region: region
        }));
      };
    })(this));
  };

  Window.prototype.ActivateDamage = function(socket) {
    this.socket = socket;
    this.damageId = X.X.AllocID();
    return X.damage.Create(this.damageId, this.offPixmap, X.damage.ReportLevel.RawRectangles);
  };

  Window.prototype.DesactivateDamage = function() {
    return X.damage.Destroy(this.damageId);
  };

  Window.prototype.GetOffPixmap = function() {
    this.offPixmap = X.X.AllocID();
    return X.composite.NameWindowPixmap(this.wid, this.offPixmap, (function(_this) {
      return function(err) {
        if (err != null) {
          return Log.Error('Composite: NameWindowPixmap', err);
        }
      };
    })(this));
  };

  Window.prototype.Destroy = function() {
    return X.X.DestroyWindow(this.wid);
  };

  return Window;

})(EventEmitter);

module.exports = Window;
