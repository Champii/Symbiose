// Generated by CoffeeScript 1.7.1
var DistantScreen, Log, Screen, VirtualDisplay, Window, X, mouse, _;

_ = require('underscore');

X = require('./X');

mouse = require('./Mouse');

Log = require('./Log');

Screen = require('./Screen');

Window = require('./Window');

DistantScreen = require('./DistantScreen');

VirtualDisplay = (function() {
  function VirtualDisplay(socket) {
    var center;
    this.socket = socket;
    this.switched = false;
    this.mouse = mouse;
    this.mainScreen = new Screen;
    this.screenPositions = {
      Top: {
        reverse: 'Bottom',
        expectedClient: 'client1',
        afterSwitchPos: {
          x: 'mouse',
          y: 'clientMax'
        }
      },
      Bottom: {
        reverse: 'Top',
        afterSwitchPos: {
          x: 'mouse',
          y: 'clientMin'
        }
      },
      Left: {
        reverse: 'Right',
        afterSwitchPos: {
          x: 'clientMin',
          y: 'mouse'
        }
      },
      Right: {
        reverse: 'Left',
        afterSwitchPos: {
          x: 'clientMax',
          y: 'mouse'
        }
      }
    };
    if (this.socket == null) {
      center = {
        x: this.mainScreen.size.width / 2,
        y: this.mainScreen.size.height / 2
      };
      this.mouse.on('moved', (function(_this) {
        return function() {
          var pos;
          if (_this.switched && _this.mouse.pos.x !== center.x && _this.mouse.pos.y !== center.y) {
            pos = {
              x: _this.mouse.pos.x - center.x,
              y: _this.mouse.pos.y - center.y
            };
            _this.switched.MovePointerRelative(pos);
            return _this.mouse.MovePointer(center);
          }
        };
      })(this));
    } else {
      this.socket.on('clientPosition', (function(_this) {
        return function(position) {
          _this.clientPosition = position;
          return _this.serverPosition = _this.screenPositions[position].reverse;
        };
      })(this));
    }
  }

  VirtualDisplay.prototype.EnableSwitch = function(position) {
    return this.mainScreen.on('switch' + position, (function(_this) {
      return function(obj) {
        _this._Switch(position);
        if (obj.wid != null) {
          return _this.SwitchWindowTo(obj, _this.screenPositions[position].client);
        }
      };
    })(this));
  };

  VirtualDisplay.prototype._SwitchPointers = function(switched, position) {
    var pos;
    if (position) {
      pos = {
        x: this.screenPositions[position].afterSwitchPos.x,
        y: this.screenPositions[position].afterSwitchPos.y
      };
      if (pos.x === 'mouse') {
        pos.x = this.mouse.pos.x;
      }
      if (pos.y === 'mouse') {
        pos.y = this.mouse.pos.y;
      }
      if (pos.x === 'clientMax') {
        pos.x = this.screenPositions[position].client.size.width - 2;
      }
      if (pos.y === 'clientMax') {
        pos.y = this.screenPositions[position].client.size.height - 2;
      }
      if (pos.x === 'clientMin') {
        pos.x = 2;
      }
      if (pos.y === 'clientMin') {
        pos.y = 2;
      }
      this.screenPositions[position].client.MovePointer(pos);
      return this.mouse.MovePointer({
        x: this.mainScreen.size.width / 2,
        y: this.mainScreen.size.height / 2
      });
    } else {
      pos = {
        x: this.screenPositions[this.screenPositions[switched.screenPosition].reverse].afterSwitchPos.x,
        y: this.screenPositions[this.screenPositions[switched.screenPosition].reverse].afterSwitchPos.y
      };
      if (pos.x === 'mouse') {
        pos.x = switched.pos.x;
      }
      if (pos.y === 'mouse') {
        pos.y = switched.pos.y;
      }
      if (pos.x === 'clientMax') {
        pos.x = this.mainScreen.size.width - 2;
      }
      if (pos.y === 'clientMax') {
        pos.y = this.mainScreen.size.height - 2;
      }
      if (pos.x === 'clientMin') {
        pos.x = 2;
      }
      if (pos.y === 'clientMin') {
        pos.y = 2;
      }
      return _.defer((function(_this) {
        return function() {
          return _this.mouse.MovePointer(pos);
        };
      })(this));
    }
  };

  VirtualDisplay.prototype._Switch = function(position) {
    var switchedSave;
    console.log('Switch', position);
    switchedSave = this.switched;
    if (this.switched || (position == null)) {
      this.switched = false;
    } else {
      this.switched = this.screenPositions[position].client;
    }
    this._SwitchPointers(switchedSave, position);
    if (this.switched) {
      return X.CreateCaptureWindow();
    } else {
      return X.DestroyCaptureWindow();
    }
  };

  VirtualDisplay.prototype.SwitchWindowTo = function(win, screen) {
    this.mainScreen.RemoveWindow(win);
    return screen.AddWindow(win);
  };

  VirtualDisplay.prototype.AddScreen = function(socket) {
    socket.once('screenInfos', (function(_this) {
      return function(infos) {
        var k, v, _ref;
        _ref = _this.screenPositions;
        for (k in _ref) {
          v = _ref[k];
          if (v.expectedClient === infos.name) {
            infos.position = k;
            _this.screenPositions[k].client = new DistantScreen(infos, socket);
            _this.screenPositions[k].client.on('switch', function() {
              return _this._Switch();
            });
            _this.EnableSwitch(k);
            Log.Log('New screen added: ', infos);
            return;
          }
        }
      };
    })(this));
    return socket.emit('askScreenInfos');
  };

  return VirtualDisplay;

})();

module.exports = VirtualDisplay;
