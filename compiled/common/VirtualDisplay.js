// Generated by CoffeeScript 1.7.1
var DistantScreen, Log, Screen, VirtualDisplay, Window, X, mouse, _;

_ = require('underscore');

X = require('./X');

mouse = require('./Mouse');

Log = require('./Log');

Screen = require('./Screen');

Window = require('./Window');

DistantScreen = require('./DistantScreen');

VirtualDisplay = (function() {
  function VirtualDisplay(socket) {
    var center;
    this.socket = socket;
    this.switched = false;
    this.mouse = mouse;
    this.mainScreen = new Screen;
    this.screenPlacement = {
      Top: {
        reverse: 'Bottom',
        expectedClient: 'client1',
        afterSwitchPos: {
          x: 'mouse',
          y: 'clientMax'
        }
      },
      Bottom: {
        reverse: 'Top',
        afterSwitchPos: {
          x: 'mouse',
          y: 'clientMin'
        }
      },
      Left: {
        reverse: 'Right',
        afterSwitchPos: {
          x: 'clientMax',
          y: 'mouse'
        }
      },
      Right: {
        reverse: 'Left',
        afterSwitchPos: {
          x: 'clientMin',
          y: 'mouse'
        }
      }
    };
    if (this.socket == null) {
      this.captureWin = 0;
      center = {
        x: this.mainScreen.size.width / 2,
        y: this.mainScreen.size.height / 2
      };
      this.mouse.on('moved', (function(_this) {
        return function() {
          var pos;
          if (_this.switched && _this.mouse.pos.x !== center.x && _this.mouse.pos.y !== center.y) {
            pos = {
              x: _this.mouse.pos.x - center.x,
              y: _this.mouse.pos.y - center.y
            };
            _this.switched.MovePointerRelative(pos);
            return _this.mouse.MovePointer(center);
          }
        };
      })(this));
      this.mouse.on('buttonDown', (function(_this) {
        return function(k) {
          if (_this.switched) {
            return _this.switched.socket.emit('buttonDown', k);
          }
        };
      })(this));
      this.mouse.on('buttonUp', (function(_this) {
        return function(k) {
          if (_this.switched) {
            return _this.switched.socket.emit('buttonUp', k);
          }
        };
      })(this));
    } else {
      this.socket.on('newWindow', (function(_this) {
        return function(data) {
          var win;
          win = _(_this.mainScreen.windows).find(function(item) {
            return (item != null) && item.hostId === data.hostId;
          });
          if (win == null) {
            console.log('New window !', data);
            return win = _this.mainScreen.NewWindow(data);
          }
        };
      })(this));
      this.socket.on('windowContent', (function(_this) {
        return function(data) {
          var win;
          console.log('Window content');
          win = _(_this.mainScreen.windows).find(function(item) {
            return (item != null) && item.hostId === data.hostId;
          });
          return win.FillWindow(data);
        };
      })(this));
      this.socket.on('clientPlacement', (function(_this) {
        return function(placement) {
          _this.clientPlacement = placement;
          return _this.serverPlacement = _this.screenPlacement[placement].reverse;
        };
      })(this));
    }
    X.on('event', (function(_this) {
      return function(ev) {
        var k, v, _ref;
        if (ev.name === 'ConfigureNotify') {
          if (_this.captureWin && ev.wid === _this.captureWin) {
            return;
          }
          if (_this.mainScreen.HasWindow(ev)) {
            return;
          }
          _ref = _this.screenPlacement;
          for (k in _ref) {
            v = _ref[k];
            if ((v.client != null) && v.client.HasWindow(ev)) {
              return;
            }
          }
          return _this.mainScreen.NewWindow(ev);
        }
      };
    })(this));
  }

  VirtualDisplay.prototype.EnableSwitch = function(placement) {
    return this.mainScreen.on('switch' + placement, (function(_this) {
      return function(obj) {
        if ((obj.wid != null) && _this.mainScreen.HasWindow(obj)) {
          obj.Move({
            x: 100,
            y: 100
          });
          _this.SwitchWindowTo(obj, _this.screenPlacement[placement].client);
        }
        return _this._Switch(placement);
      };
    })(this));
  };

  VirtualDisplay.prototype._AfterSwitchPos = function(placement, mouse) {
    var pos;
    pos = {
      x: this.screenPlacement[placement].afterSwitchPos.x,
      y: this.screenPlacement[placement].afterSwitchPos.y
    };
    if (pos.x === 'mouse') {
      pos.x = mouse.pos.x;
    }
    if (pos.y === 'mouse') {
      pos.y = mouse.pos.y;
    }
    if (pos.x === 'clientMax') {
      pos.x = this.screenPlacement[placement].client.size.width - 2;
    }
    if (pos.y === 'clientMax') {
      pos.y = this.screenPlacement[placement].client.size.height - 2;
    }
    if (pos.x === 'clientMin') {
      pos.x = 2;
    }
    if (pos.y === 'clientMin') {
      pos.y = 2;
    }
    return pos;
  };

  VirtualDisplay.prototype._SwitchPointers = function(switched, placement) {
    var pos;
    if (placement) {
      pos = this._AfterSwitchPos(placement, this.mouse);
      this.screenPlacement[placement].client.MovePointer(pos);
      return this.mouse.MovePointer({
        x: this.mainScreen.size.width / 2,
        y: this.mainScreen.size.height / 2
      });
    } else {
      pos = this._AfterSwitchPos(this.screenPlacement[switched.placement].reverse, switched);
      return _.defer((function(_this) {
        return function() {
          return _this.mouse.MovePointer(pos);
        };
      })(this));
    }
  };

  VirtualDisplay.prototype._Switch = function(placement) {
    var switchedSave;
    console.log('Switch', placement);
    switchedSave = this.switched;
    if (this.switched && (placement != null)) {
      console.log('Already Switched.');
      return;
    }
    if (this.switched || (placement == null)) {
      this.switched = false;
    } else {
      this.switched = this.screenPlacement[placement].client;
    }
    this._SwitchPointers(switchedSave, placement);
    if (this.switched) {
      return this.captureWin = X.CreateCaptureWindow();
    } else {
      X.DestroyCaptureWindow();
      return this.captureWin = 0;
    }
  };

  VirtualDisplay.prototype.SwitchWindowTo = function(win, screen) {
    var pos;
    console.log('Switch Win');
    pos = this._AfterSwitchPos(screen.placement, {
      pos: {
        x: win.x,
        y: win.y
      }
    });
    pos = {
      x: 100,
      y: 100
    };
    screen.socket.emit('newWindow', _(win.Serialize()).extend(pos));
    this.mainScreen.DelWindow(win);
    return screen.AddWindow(win);
  };

  VirtualDisplay.prototype.AddScreen = function(socket) {
    socket.once('screenInfos', (function(_this) {
      return function(infos) {
        var k, v, _ref;
        _ref = _this.screenPlacement;
        for (k in _ref) {
          v = _ref[k];
          if (v.expectedClient === infos.name) {
            infos.placement = k;
            _this.screenPlacement[k].client = new DistantScreen(infos, socket);
            _this.screenPlacement[k].client.on('switch', function() {
              return _this._Switch();
            });
            _this.EnableSwitch(k);
            Log.Log('New screen added: ', infos);
            return;
          }
        }
      };
    })(this));
    return socket.emit('askScreenInfos');
  };

  return VirtualDisplay;

})();

module.exports = VirtualDisplay;
