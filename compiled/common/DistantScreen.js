// Generated by CoffeeScript 1.7.1
var DistantScreen, EventEmitter, Log, Window, X, mouse, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

EventEmitter = require('events').EventEmitter;

X = require('./X');

Log = require('./Log');

mouse = require('../common/Mouse');

Window = require('./Window');

DistantScreen = (function(_super) {
  __extends(DistantScreen, _super);

  function DistantScreen(infos, socket) {
    this.socket = socket;
    this.windows = [];
    this.size = {
      width: infos.width,
      height: infos.height
    };
    this.name = infos.name;
    this.placement = infos.placement;
    this.pos = {
      x: 0,
      y: 0
    };
    this.socket.emit('clientPosition', this.placement);
  }

  DistantScreen.prototype.MovePointer = function(pos) {
    this.pos = pos;
    this._ContentPointer();
    return this.socket.emit('mousePos', this.pos);
  };

  DistantScreen.prototype.MovePointerRelative = function(delta) {
    this.pos.x = this.pos.x + delta.x;
    this.pos.y = this.pos.y + delta.y;
    this._ContentPointer();
    this.socket.emit('mousePos', this.pos);
    return this.HasReachedEdge();
  };

  DistantScreen.prototype._ContentPointer = function() {
    if (this.pos.x < 0) {
      this.pos.x = 0;
    }
    if (this.pos.x >= this.size.width) {
      this.pos.x = this.size.width;
    }
    if (this.pos.y < 0) {
      this.pos.y = 0;
    }
    if (this.pos.y >= this.size.height) {
      return this.pos.y = this.size.height;
    }
  };

  DistantScreen.prototype.HasReachedEdge = function() {
    if (this.pos.x <= 1 && this.placement === 'Right') {
      return this.emit('switch');
    } else if (this.pos.y <= 1 && this.placement === 'Bottom') {
      return this.emit('switch');
    } else if (this.pos.x >= this.size.width - 2 && this.placement === 'Left') {
      return this.emit('switch');
    } else if (this.pos.y >= this.size.height - 2 && this.placement === 'Top') {
      return this.emit('switch');
    }
  };

  DistantScreen.prototype.GetWindow = function(wid) {
    return _(this.windows).find((function(_this) {
      return function(item) {
        return (item != null) && item.wid === wid;
      };
    })(this));
  };

  DistantScreen.prototype.HasWindow = function(win) {
    if (_(this.windows).find((function(_this) {
      return function(item) {
        return (item != null) && item.wid === win.wid;
      };
    })(this)) != null) {
      return true;
    } else {
      return false;
    }
  };

  DistantScreen.prototype.AddWindow = function(win) {
    if (this.HasWindow(win)) {
      return;
    }
    this.windows.push(win);
    X.composite.RedirectSubwindows(win.wid, X.composite.Redirect.Automatic, (function(_this) {
      return function(err) {
        if (err != null) {
          return Log.Error('Composite: RedirectWindow', err);
        }
      };
    })(this));
    win.GetOffPixmap();
    win.ActivateDamage(this.socket);
    win.SendTo(this.socket);
    return win.Hide();
  };

  DistantScreen.prototype.DelWindow = function(win) {
    clearInterval(win.timer);
    return this.windows = _(this.windows).reject(function(item) {
      return item.id === win.id;
    });
  };

  return DistantScreen;

})(EventEmitter);

module.exports = DistantScreen;
