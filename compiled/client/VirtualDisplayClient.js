// Generated by CoffeeScript 1.7.1
var LocalScreenClient, Log, VirtualDisplay, VirtualDisplayClient, Window, X, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

X = require('../common/X');

Log = require('../common/Log');

LocalScreenClient = require('./LocalScreenClient');

Window = require('../common/Window');

VirtualDisplay = require('../common/VirtualDisplay');

VirtualDisplayClient = (function(_super) {
  __extends(VirtualDisplayClient, _super);

  function VirtualDisplayClient(socket) {
    this.socket = socket;
    VirtualDisplayClient.__super__.constructor.call(this);
    this.mainScreen = new LocalScreenClient;
    this.socket.on('newWindow', (function(_this) {
      return function(data) {
        var win;
        win = _(_this.mainScreen.windows).find(function(item) {
          return (item != null) && item.hostId === data.hostId;
        });
        if (win == null) {
          return win = _this.mainScreen.NewWindow(data);
        }
      };
    })(this));
    this.socket.on('windowContent', (function(_this) {
      return function(data) {
        var win;
        win = _(_this.mainScreen.windows).find(function(item) {
          return (item != null) && item.hostId === data.hostId;
        });
        return win.FillWindow(data);
      };
    })(this));
    this.socket.on('clientPlacement', (function(_this) {
      return function(placement) {
        _this.clientPlacement = placement;
        return _this.serverPlacement = _this.screenPlacement[placement].reverse;
      };
    })(this));
    X.on('event', (function(_this) {
      return function(ev) {
        if (ev.name === 'ConfigureNotify') {
          if (_this.mainScreen.HasWindow(ev)) {
            return;
          }
          return _this.mainScreen.NewWindow(ev);
        }
      };
    })(this));
  }

  return VirtualDisplayClient;

})(VirtualDisplay);

module.exports = VirtualDisplayClient;
