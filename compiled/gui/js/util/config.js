// Generated by CoffeeScript 1.7.1
var Config, conf, config, fs, rootScope;

fs = require('fs');

rootScope = null;

conf = null;

Config = (function() {
  function Config() {
    this.path = './config/';
    this.filename = 'config';
    this.mode = null;
    if (this.Exists()) {
      this.Parse();
    } else {
      this.Create();
    }
    if (rootScope != null) {
      rootScope.$on('config_reset', (function(_this) {
        return function(e, config) {
          console.log('1', _this);
          _this.Parse();
          return console.log('2', _this);
        };
      })(this));
    }
  }

  Config.prototype.Open = function(mode) {
    return this.fd = fs.openSync(this.path + this.filename, mode);
  };

  Config.prototype.Close = function() {
    return fs.closeSync(this.fd);
  };

  Config.prototype.Create = function() {
    this.Open('a');
    this.Close();
    return this.Write();
  };

  Config.prototype.Parse = function() {
    var k, test, v, _results;
    test = JSON.parse(fs.readFileSync(this.path + this.filename, {
      encoding: 'UTF8'
    }));
    _results = [];
    for (k in test) {
      v = test[k];
      _results.push(this[k] = v);
    }
    return _results;
  };

  Config.prototype.Write = function() {
    var k, obj, v;
    obj = {};
    for (k in this) {
      v = this[k];
      if (k !== 'path' && k !== 'filename' && k !== 'fd' && typeof v !== 'function') {
        obj[k] = v;
      }
    }
    return fs.writeFileSync(this.path + this.filename, JSON.stringify(obj), {
      encoding: 'UTF8'
    });
  };

  Config.prototype.Exists = function() {
    return fs.existsSync(this.path + this.filename);
  };

  Config.prototype.Reset = function() {
    var k, v;
    for (k in this) {
      v = this[k];
      if (k !== 'path' && k !== 'filename' && k !== 'fd' && typeof v !== 'function') {
        delete this[k];
      }
    }
    this.mode = null;
    this.Write();
    if (rootScope != null) {
      return rootScope.$emit('config_reset', this);
    }
  };

  return Config;

})();

config = function($rootScope) {
  var k, v;
  rootScope = $rootScope;
  conf = new Config;
  for (k in conf) {
    v = conf[k];
    this[k] = v;
  }
  return this;
};

if (this.symbiose != null) {
  this.symbiose.service('config', ['$rootScope', config]);
}

if (typeof module !== "undefined" && module !== null) {
  module.exports = Config;
}
