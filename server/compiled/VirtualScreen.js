// Generated by CoffeeScript 1.7.1
var Log, VirtualScreen, X, bus;

bus = require('../../common/compiled/Bus');

Log = require('../../common/compiled/Log');

X = require('../../common/compiled/X');

VirtualScreen = (function() {
  function VirtualScreen() {
    this.screens = [];
    this.cursorPos = {
      x: 0,
      y: 0
    };
    this.switchedOutput = false;
    this.X = new X((function(_this) {
      return function() {
        _this.screens[0] = {
          width: _this.X.display.screen[0].pixel_width,
          height: _this.X.display.screen[0].pixel_height
        };
        return Log.Log('Host screen', _this.screens[0]);
      };
    })(this));
    this.X.on('mousePos', (function(_this) {
      return function(pos) {
        console.log('lol', pos);
        _this.cursorPos = pos;
        if ((!_this.switchedOutput && _this.cursorPos.y <= 0) || (_this.switchedOutput && _this.cursorPos.y >= _this.screens[1].height - 1)) {
          _this._SwitchOutput();
        }
        if (_this.switchedOutput) {
          return _this.socket.emit('mousePos', _this.cursorPos);
        }
      };
    })(this));
  }

  VirtualScreen.prototype._SwitchOutput = function() {
    console.log('Switch !', this.screens);
    this.switchedOutput = !this.switchedOutput;
    if (this.switchedOutput) {
      this.cursorPos = {
        x: this.cursorPos.x,
        y: this.screens[0].height - 1
      };
      this.X.StopPointerQuery();
      this.X.CreateCaptureWindow(this.screens[1]);
      this.X.MovePointer(this.cursorPos);
      return this.X.Grab();
    } else {
      this.X.Ungrab();
      this.cursorPos = {
        x: this.cursorPos.x,
        y: 0
      };
      this.X.MovePointer(this.cursorPos);
      this.X.DestroyCaptureWindow();
      return this.X.StartPointerQuery();
    }
  };

  VirtualScreen.prototype.AddScreen = function(socket) {
    this.socket = socket;
    this.socket.once('screenInfos', (function(_this) {
      return function(infos) {
        _this.screens.push(infos);
        Log.Log('New screen added: ', infos);
        return _this.X.StartPointerQuery();
      };
    })(this));
    return this.socket.emit('askScreenInfos');
  };

  VirtualScreen.prototype.Destroy = function() {};

  return VirtualScreen;

})();

module.exports = VirtualScreen;
