// Generated by CoffeeScript 1.7.1
var Log, MouseReader, MouseWriter, VirtualScreen, bus, x11;

x11 = require('x11');

bus = require('../../common/compiled/Bus');

Log = require('../../common/compiled/Log');

MouseReader = require('../../common/compiled/MouseReader');

MouseWriter = require('../../common/compiled/MouseWriter');

VirtualScreen = (function() {
  function VirtualScreen() {
    this.screens = [];
    this.cursorPos = {
      x: 0,
      y: 0
    };
    x11.createClient((function(_this) {
      return function(err, display) {
        if (err != null) {
          return Log.Error(err);
        }
        _this.screens[0] = {
          width: display.screen[0].pixel_width,
          height: display.screen[0].pixel_height
        };
        return Log.Log('Host screen', _this.screens[0]);
      };
    })(this));
    this.mouseWrite = new MouseWriter;
    this.mouseWrite.MoveTo(this.cursorPos);
    this.mouseRead = new MouseReader;
    this.mouseRead.on('moved', (function(_this) {
      return function(infos) {
        _this.cursorPos.x += infos.xDelta;
        _this.cursorPos.y -= infos.yDelta;
        if (Math.abs(infos.xDelta) > 3 || Math.abs(infos.yDelta) > 3) {
          _this.mouseWrite.MoveTo(_this.cursorPos);
        }
        if (_this.cursorPos.y < 0 && (_this.socket != null)) {
          _this.socket.emit('mousePos', {
            x: _this.cursorPos.x,
            y: _this.cursorPos.y + _this.screens[1].height
          });
        }
        return Log.Log(_this.cursorPos);
      };
    })(this));
    this.mouseRead.on('button', (function(_this) {
      return function(infos) {
        return bus.emit('mouseButton', infos);
      };
    })(this));
  }

  VirtualScreen.prototype.AddScreen = function(socket) {
    this.socket = socket;
    this.socket.once('screenInfos', (function(_this) {
      return function(infos) {
        _this.screens.push(infos);
        _this.socket.emit('initialCursorPos', _this.cursorPos);
        return Log.Log('New screen added: ', infos);
      };
    })(this));
    return this.socket.emit('askScreenInfos');
  };

  VirtualScreen.prototype.Destroy = function() {
    return this.mouseRead.Close();
  };

  return VirtualScreen;

})();

module.exports = VirtualScreen;
